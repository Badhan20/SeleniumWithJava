Create XPaths
================================================================================
Basic Syntax
Using And & OR
contains()
start-with()
text()
following
Preceding
Ancestor
Absolute vs Relative

Single Attribute
------------------------------------------
Syntax: //tagName[@attributeName='value']

Example:
//a [@href='https://ww.google.com']
//input [@id="uname"]
//input [@name='username']
//img [@alt='sometext']


Multiple Attributes
----------------------------------------------------------------------
Syntax: //tagName[@attributeName1='value1'][@attributeName2='value2']

Example:
//a [@href='https://ww.google.com'][@id="uname"]
//img [@alt='sometext'][@source='value']


AND Operator (Multiple Attributes)
-------------------------------------------------------------------------
Syntax: //tagName[@attributeName1='value1' and @attributeName2='value2']

Example:
//a [@href='https://ww.google.com' and @id="uname"]


OR Operator (Multiple Attributes)
------------------------------------------------------------------------
Syntax: //tagName[@attributeName1='value1' or @attributeName2='value2']

Example:
//a [@href='https://ww.google.com' or @id="uname"]


Contains 
------------------------------------------------------
Syntax: //tagName[contains(@attributeName, 'value')]

Example:
//a [contains(@href, 'https://ww.google.com')]

starts-with() 
-------------------------------------------------------
Syntax: //tagName[starts-with(@attributeName, 'value')]

Example:
//a [contains(@href, 'https://ww.google.com')]


Text()
----------------------------------------------------------------------
Syntax: //tagName[text()='value')]

Example:
//h1[text()='Secure Client Login']
//h1[text()='Secure Client Login'][contains(@attributeName, 'value')]

Following
--------------------------------------------------------------------------------------
Syntax: tagName[@attributeName1='value1']//following::tagName[@attributeName2='value2'

Example:
//h2[contains(@class, 'title_block')]//following::a[text()='Casual Dresses']
//h2[contains(@class, 'title_block')]//following::a[text()='Casual Dresses'][1]


Preceding
----------------------------------------------------------------
Syntax: tagName[@attributeName1='value1']//preceding::tagName[]

Example:
//h2[contains(@class, 'title_block')]//preceding::a[]
//h2[contains(@class, 'title_block')]//preceding::input[2]


Ancestor (Will show all the related parent/grand parent)
---------------------------------------------------------------
Syntax: tagName[@attributeName1='value1']//ancestor::tagName[]

Example:
//h2[contains(@class, 'title_block')]//ancestor::a[]
//h2[contains(@class, 'title_block')]//ancestor::input[2]



Absolute vs Relative
-----------------------------------------------------------------------
Combined Syntax: tagName[@attributeName1='value1']/tagName[1]/tagName[2]

Example: //a [@href='https://ww.google.com']/div[1]/a[2]

// --> Will search throughout the page
/ --> Will start afterward

Absolute Xpath: It uses Complete path from the Root Element to the desire element.
     Example: /html/body/div[5]/div[2]/div/div[2]/div[2]/h2[1]

Relative Xpath: You can simply start by referencing the element you want and go from there.
     Example: //*[@id='answers']/h2[1]/a[1]
     
There are 3 differences:

1. Absolute will start with / where as Relative will start with //
2. Attributes is not used in absolute where as attribute is used in relative
3. Absolute is a complete path where as relative is partial path